<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:b="http://bootsfaces.net/ui">

<ui:composition template="../template.xhtml">
	<ui:define name="content">
		<!-- Tag permettant de gérer des données contextuelles à la vue -->
		<f:metadata>
			<!-- Ce tag permet de lier une propriété d'un bean sans en faire un champ dans la page.
			C'est simplement contextuel à la vue. -->
			<f:viewParam name="productId" value="#{productController.productId}" />
			<!-- Ce tag permet de déclancher une méthode Java lors d'un "process event" du cycle de vie
			JSF. Le preRenderView est l'événement déclanché avant la dernière étape du cycle 'RenderView'. -->
			<f:event type="preRenderView" listener="#{productController.prepareEdit}" />
		</f:metadata>
		<!-- Tag permettant d'encapsuler un autre tag sans générer d'HTML supplémentaire. La balise
		fragment disparait lors de l'étape RenderView qui génère le code HTML. -->
		<ui:fragment rendered="#{empty productController.productId}">
			<h2>Créer un nouveau produit :</h2>
		</ui:fragment>
		<!-- L'attribut rendered permet de conditionner (true/false) la présence d'un tag dans le code HTML.
		Cet attribut permet donc de conditionner l'affichage, mais il faut bien se rappeler qu'il gère
		cette présence lors de l'étape RenderView, pas dans la page HTML. Ce n'est donc quelque chose
		qu'on ne peut altérer côté client en CSS ou JS, car un élément dont le rendered est à false ne
		sera pas du tout dans la page. -->
		<ui:fragment rendered="#{!empty productController.productId}">
			<h2>Modifier un produit :</h2>
		</ui:fragment>
		<b:form>
			<!-- Ce champ n'est visible qu'en édition est n'est pas modifiable (readonly).
			Il existe en CSS un sélecteur ':read-only' qui permet de modifier facilement le style. -->
			<b:inputText label="Id" value="#{productController.productId}"
				rendered="#{!empty productController.productId}"
				readonly="true" />
			<b:inputText label="Intitulé" value="#{productBean.intitule}">
				<!-- Rend la saisie du champ obligatoire. -->
				<f:validateRequired />
			</b:inputText>
			<b:inputText type="number" label="Poids" value="#{productBean.poids}">
				<!-- La saisie doit pouvoir être transformée en float Java. -->
				<f:validateRequired />
				<f:validateDoubleRange />
			</b:inputText>
			<b:inputText label="Référence (unique)"
				value="#{productBean.reference}">
				<f:validateRequired />
				<f:validateLength minimum="3" maximum="32" />	
			</b:inputText>
			<b:commandButton value="Valider" action="#{productController.save}" />
		</b:form>
	</ui:define>
</ui:composition>
</html>